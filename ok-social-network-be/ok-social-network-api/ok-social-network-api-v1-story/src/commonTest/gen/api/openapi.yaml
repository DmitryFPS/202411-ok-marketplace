openapi: 3.0.4
info:
  description: It's a place where people communicate with each other
  title: "SocialNetwork ${VERSION_APP}"
  version: 1.0.0
servers:
- url: http://localhost:8080/v1
tags:
- description: Story (для обмена между пользователями)
  name: story
paths:
  /story/create:
    post:
      operationId: storyCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoryCreateRequest'
        description: Request body
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoryCreateResponse'
          description: Success
      summary: Create story
      tags:
      - story
      x-content-type: application/json
      x-accepts:
      - application/json
  /story/read:
    post:
      operationId: storyRead
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoryReadRequest'
        description: Request body
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoryReadResponse'
          description: Success
      summary: Read story
      tags:
      - story
      x-content-type: application/json
      x-accepts:
      - application/json
  /story/update:
    post:
      operationId: storyUpdate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoryUpdateRequest'
        description: Request body
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoryUpdateResponse'
          description: Success
      summary: Update story
      tags:
      - story
      x-content-type: application/json
      x-accepts:
      - application/json
  /story/delete:
    post:
      operationId: storyDelete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoryDeleteRequest'
        description: Request body
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoryDeleteResponse'
          description: Success
      summary: Delete story
      tags:
      - story
      x-content-type: application/json
      x-accepts:
      - application/json
  /story/find:
    post:
      operationId: storyFind
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoryFindRequest'
        description: Request body
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoryFindResponse'
          description: Success
      summary: Search story
      tags:
      - story
      x-content-type: application/json
      x-accepts:
      - application/json
components:
  schemas:
    IRequest:
      description: Базовый интерфейс для всех запросов
      discriminator:
        mapping:
          create: '#/components/schemas/StoryCreateRequest'
          read: '#/components/schemas/StoryReadRequest'
          update: '#/components/schemas/StoryUpdateRequest'
          delete: '#/components/schemas/StoryDeleteRequest'
          find: '#/components/schemas/StoryFindRequest'
        propertyName: requestType
      properties:
        requestType:
          description: Поле discriminator для вычисления типа запроса
          example: create
          type: string
      type: object
    IResponse:
      description: Базовый интерфейс для всех ответов
      discriminator:
        mapping:
          create: '#/components/schemas/StoryCreateResponse'
          read: '#/components/schemas/StoryReadResponse'
          update: '#/components/schemas/StoryUpdateResponse'
          delete: '#/components/schemas/StoryDeleteResponse'
          find: '#/components/schemas/StoryFindResponse'
        propertyName: responseType
      properties:
        responseType:
          description: Поле discriminator для вычисления типа запроса
          example: create
          type: string
        result:
          $ref: '#/components/schemas/ResponseResult'
        errors:
          items:
            $ref: '#/components/schemas/Error'
          type: array
      type: object
    StoryCreateRequest:
      allOf:
      - $ref: '#/components/schemas/IRequest'
      - $ref: '#/components/schemas/StoryRequestDebug'
      - properties:
          story:
            $ref: '#/components/schemas/StoryCreateObject'
        type: object
      example:
        debug:
          mode: prod
          stub: success
        requestType: create
        story:
          createdAt: null
          mediaUrl: mediaUrl
          visibility: ownerOnly
          viewsCount: null
          content: content
          expiresAt: 2000-01-23
    StoryCreateObject:
      allOf:
      - $ref: '#/components/schemas/BaseStory'
      - description: "Объект, который возвращается в ответе BH"
        properties:
          createdAt:
            $ref: '#/components/schemas/CreatedStoryAt'
          viewsCount:
            $ref: '#/components/schemas/ViewsStoryCount'
        required:
        - createdAt
        type: object
      example:
        createdAt: null
        mediaUrl: mediaUrl
        visibility: ownerOnly
        viewsCount: null
        content: content
        expiresAt: 2000-01-23
    StoryCreateResponse:
      allOf:
      - $ref: '#/components/schemas/IResponse'
      - $ref: '#/components/schemas/StoryResponseSingle'
      example:
        result: success
        responseType: create
        errors:
        - code: code
          field: field
          message: message
          group: group
        - code: code
          field: field
          message: message
          group: group
        story:
          createdAt: null
          mediaUrl: mediaUrl
          visibility: ownerOnly
          permissions:
          - read
          - read
          viewsCount: null
          lock: null
          id: null
          ownerId: null
          content: content
          expiresAt: 2000-01-23
    StoryResponseSingle:
      allOf:
      - description: Ответ с одной Story
        properties:
          story:
            $ref: '#/components/schemas/StoryResponseObject'
        type: object
    StoryResponseObject:
      allOf:
      - $ref: '#/components/schemas/BaseStory'
      - description: "Объект, который возвращается в ответе BH"
        properties:
          id:
            $ref: '#/components/schemas/StoryId'
          ownerId:
            $ref: '#/components/schemas/UserId'
          lock:
            $ref: '#/components/schemas/StoryLock'
          createdAt:
            $ref: '#/components/schemas/CreatedStoryAt'
          viewsCount:
            $ref: '#/components/schemas/ViewsStoryCount'
          permissions:
            items:
              $ref: '#/components/schemas/StoryPermissions'
            type: array
            uniqueItems: true
        type: object
      example:
        createdAt: null
        mediaUrl: mediaUrl
        visibility: ownerOnly
        permissions:
        - read
        - read
        viewsCount: null
        lock: null
        id: null
        ownerId: null
        content: content
        expiresAt: 2000-01-23
    StoryReadRequest:
      allOf:
      - $ref: '#/components/schemas/IRequest'
      - $ref: '#/components/schemas/StoryRequestDebug'
      - properties:
          story:
            $ref: '#/components/schemas/StoryReadObject'
        type: object
      example:
        debug:
          mode: prod
          stub: success
        requestType: create
        story:
          id: null
    StoryReadObject:
      allOf:
      - properties:
          id:
            $ref: '#/components/schemas/StoryId'
        type: object
      example:
        id: null
    StoryReadResponse:
      allOf:
      - $ref: '#/components/schemas/IResponse'
      - $ref: '#/components/schemas/StoryResponseSingle'
      example:
        result: success
        responseType: create
        errors:
        - code: code
          field: field
          message: message
          group: group
        - code: code
          field: field
          message: message
          group: group
        story:
          createdAt: null
          mediaUrl: mediaUrl
          visibility: ownerOnly
          permissions:
          - read
          - read
          viewsCount: null
          lock: null
          id: null
          ownerId: null
          content: content
          expiresAt: 2000-01-23
    StoryUpdateRequest:
      allOf:
      - $ref: '#/components/schemas/IRequest'
      - $ref: '#/components/schemas/StoryRequestDebug'
      - properties:
          story:
            $ref: '#/components/schemas/StoryUpdateObject'
        type: object
      example:
        debug:
          mode: prod
          stub: success
        requestType: create
        story:
          mediaUrl: mediaUrl
          visibility: ownerOnly
          lock: null
          id: null
          content: content
          expiresAt: 2000-01-23
    StoryUpdateObject:
      allOf:
      - $ref: '#/components/schemas/BaseStory'
      - properties:
          id:
            $ref: '#/components/schemas/StoryId'
          lock:
            $ref: '#/components/schemas/StoryLock'
        type: object
      example:
        mediaUrl: mediaUrl
        visibility: ownerOnly
        lock: null
        id: null
        content: content
        expiresAt: 2000-01-23
    StoryUpdateResponse:
      allOf:
      - $ref: '#/components/schemas/IResponse'
      - $ref: '#/components/schemas/StoryResponseSingle'
      example:
        result: success
        responseType: create
        errors:
        - code: code
          field: field
          message: message
          group: group
        - code: code
          field: field
          message: message
          group: group
        story:
          createdAt: null
          mediaUrl: mediaUrl
          visibility: ownerOnly
          permissions:
          - read
          - read
          viewsCount: null
          lock: null
          id: null
          ownerId: null
          content: content
          expiresAt: 2000-01-23
    StoryDeleteRequest:
      allOf:
      - $ref: '#/components/schemas/IRequest'
      - $ref: '#/components/schemas/StoryRequestDebug'
      - properties:
          story:
            $ref: '#/components/schemas/StoryDeleteObject'
        type: object
      example:
        debug:
          mode: prod
          stub: success
        requestType: create
        story:
          lock: null
          id: null
    StoryDeleteObject:
      allOf:
      - properties:
          id:
            $ref: '#/components/schemas/StoryId'
          lock:
            $ref: '#/components/schemas/StoryLock'
        type: object
      example:
        lock: null
        id: null
    StoryDeleteResponse:
      allOf:
      - $ref: '#/components/schemas/IResponse'
      - $ref: '#/components/schemas/StoryResponseSingle'
      example:
        result: success
        responseType: create
        errors:
        - code: code
          field: field
          message: message
          group: group
        - code: code
          field: field
          message: message
          group: group
        story:
          createdAt: null
          mediaUrl: mediaUrl
          visibility: ownerOnly
          permissions:
          - read
          - read
          viewsCount: null
          lock: null
          id: null
          ownerId: null
          content: content
          expiresAt: 2000-01-23
    StoryFindRequest:
      allOf:
      - $ref: '#/components/schemas/IRequest'
      - $ref: '#/components/schemas/StoryRequestDebug'
      - properties:
          storyFilter:
            $ref: '#/components/schemas/StoryFindFilter'
        type: object
      example:
        debug:
          mode: prod
          stub: success
        requestType: create
        storyFilter:
          findStorages: findStorages
    StoryFindFilter:
      description: Набор фильтров для поиска
      example:
        findStorages: findStorages
      properties:
        findStorages:
          description: Идентификатор пользователя
          type: string
      type: object
    StoryFindResponse:
      allOf:
      - $ref: '#/components/schemas/IResponse'
      - $ref: '#/components/schemas/StoryResponseMulti'
      example:
        result: success
        responseType: create
        stories:
        - createdAt: null
          mediaUrl: mediaUrl
          visibility: ownerOnly
          permissions:
          - read
          - read
          viewsCount: null
          lock: null
          id: null
          ownerId: null
          content: content
          expiresAt: 2000-01-23
        - createdAt: null
          mediaUrl: mediaUrl
          visibility: ownerOnly
          permissions:
          - read
          - read
          viewsCount: null
          lock: null
          id: null
          ownerId: null
          content: content
          expiresAt: 2000-01-23
        errors:
        - code: code
          field: field
          message: message
          group: group
        - code: code
          field: field
          message: message
          group: group
    StoryResponseMulti:
      allOf:
      - description: Список найденных объектов
        properties:
          stories:
            items:
              $ref: '#/components/schemas/StoryResponseObject'
            type: array
        type: object
    StoryId:
      description: Идентификатор Story
      type: string
    UserId:
      description: Идентификатор пользователя
      type: string
    StoryLock:
      description: Версия оптимистичной блокировки
      type: string
    CreatedStoryAt:
      description: Дата и время создания story
      format: date
      type: string
    ViewsStoryCount:
      description: Количество просмотров
      format: int64
      type: integer
    StoryPermissions:
      description: Доступы для пользователя над операцией над story
      enum:
      - read
      - update
      - delete
      - makeVisiblePublic
      - makeVisiblePrivate
      - makeVisibleGroup
      type: string
    ResponseResult:
      enum:
      - success
      - error
      type: string
    BaseStory:
      description: "Объект описывает свойства, одинаковые для create и update"
      properties:
        content:
          description: Текстовое содержание
          type: string
        mediaUrl:
          description: Ссылка на медиафайл
          type: string
        expiresAt:
          description: Дата и время истечения срока жизни story
          format: date
          type: string
        visibility:
          $ref: '#/components/schemas/StoryVisibility'
      required:
      - content
      - expiresAt
      type: object
    StoryVisibility:
      description: "Тип видимости Story. Возможные значения: видит только владелец\
        , только зарегистрированный в системе пользователь, видимо всем"
      enum:
      - ownerOnly
      - registeredOnly
      - public
      type: string
    Error:
      example:
        code: code
        field: field
        message: message
        group: group
      properties:
        code:
          type: string
        group:
          type: string
        field:
          type: string
        message:
          type: string
      type: object
    StoryRequestDebug:
      properties:
        debug:
          $ref: '#/components/schemas/StoryDebug'
      type: object
    StoryDebug:
      example:
        mode: prod
        stub: success
      properties:
        mode:
          $ref: '#/components/schemas/StoryRequestDebugMode'
        stub:
          $ref: '#/components/schemas/StoryRequestDebugStubs'
      type: object
    StoryRequestDebugMode:
      enum:
      - prod
      - test
      - stub
      type: string
    StoryRequestDebugStubs:
      description: Перечисления всех stubs
      enum:
      - success
      - notFound
      - badId
      - badContent
      - cannotDelete
      - badSearch
      type: string

