/*
 * SocialNetwork ${VERSION_APP}
 * It's a place where people communicate with each other
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.StoryPermissions;
import org.openapitools.client.model.StoryVisibility;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StoryResponseObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-17T00:28:35.731692+03:00[Europe/Moscow]", comments = "Generator version: 7.7.0")
public class StoryResponseObject {
  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_MEDIA_URL = "mediaUrl";
  @SerializedName(SERIALIZED_NAME_MEDIA_URL)
  private String mediaUrl;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expiresAt";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private LocalDate expiresAt;

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  private StoryVisibility visibility;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_OWNER_ID = "ownerId";
  @SerializedName(SERIALIZED_NAME_OWNER_ID)
  private String ownerId;

  public static final String SERIALIZED_NAME_LOCK = "lock";
  @SerializedName(SERIALIZED_NAME_LOCK)
  private String lock;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private LocalDate createdAt;

  public static final String SERIALIZED_NAME_VIEWS_COUNT = "viewsCount";
  @SerializedName(SERIALIZED_NAME_VIEWS_COUNT)
  private Long viewsCount;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private Set<StoryPermissions> permissions = new LinkedHashSet<>();

  public StoryResponseObject() {
  }

  public StoryResponseObject content(String content) {
    this.content = content;
    return this;
  }

  /**
   * Текстовое содержание
   * @return content
   */
  @javax.annotation.Nonnull
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public StoryResponseObject mediaUrl(String mediaUrl) {
    this.mediaUrl = mediaUrl;
    return this;
  }

  /**
   * Ссылка на медиафайл
   * @return mediaUrl
   */
  @javax.annotation.Nullable
  public String getMediaUrl() {
    return mediaUrl;
  }

  public void setMediaUrl(String mediaUrl) {
    this.mediaUrl = mediaUrl;
  }


  public StoryResponseObject expiresAt(LocalDate expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

  /**
   * Дата и время истечения срока жизни story
   * @return expiresAt
   */
  @javax.annotation.Nonnull
  public LocalDate getExpiresAt() {
    return expiresAt;
  }

  public void setExpiresAt(LocalDate expiresAt) {
    this.expiresAt = expiresAt;
  }


  public StoryResponseObject visibility(StoryVisibility visibility) {
    this.visibility = visibility;
    return this;
  }

  /**
   * Get visibility
   * @return visibility
   */
  @javax.annotation.Nullable
  public StoryVisibility getVisibility() {
    return visibility;
  }

  public void setVisibility(StoryVisibility visibility) {
    this.visibility = visibility;
  }


  public StoryResponseObject id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Идентификатор Story
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public StoryResponseObject ownerId(String ownerId) {
    this.ownerId = ownerId;
    return this;
  }

  /**
   * Идентификатор пользователя
   * @return ownerId
   */
  @javax.annotation.Nullable
  public String getOwnerId() {
    return ownerId;
  }

  public void setOwnerId(String ownerId) {
    this.ownerId = ownerId;
  }


  public StoryResponseObject lock(String lock) {
    this.lock = lock;
    return this;
  }

  /**
   * Версия оптимистичной блокировки
   * @return lock
   */
  @javax.annotation.Nullable
  public String getLock() {
    return lock;
  }

  public void setLock(String lock) {
    this.lock = lock;
  }


  public StoryResponseObject createdAt(LocalDate createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Дата и время создания story
   * @return createdAt
   */
  @javax.annotation.Nullable
  public LocalDate getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(LocalDate createdAt) {
    this.createdAt = createdAt;
  }


  public StoryResponseObject viewsCount(Long viewsCount) {
    this.viewsCount = viewsCount;
    return this;
  }

  /**
   * Количество просмотров
   * @return viewsCount
   */
  @javax.annotation.Nullable
  public Long getViewsCount() {
    return viewsCount;
  }

  public void setViewsCount(Long viewsCount) {
    this.viewsCount = viewsCount;
  }


  public StoryResponseObject permissions(Set<StoryPermissions> permissions) {
    this.permissions = permissions;
    return this;
  }

  public StoryResponseObject addPermissionsItem(StoryPermissions permissionsItem) {
    if (this.permissions == null) {
      this.permissions = new LinkedHashSet<>();
    }
    this.permissions.add(permissionsItem);
    return this;
  }

  /**
   * Get permissions
   * @return permissions
   */
  @javax.annotation.Nullable
  public Set<StoryPermissions> getPermissions() {
    return permissions;
  }

  public void setPermissions(Set<StoryPermissions> permissions) {
    this.permissions = permissions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StoryResponseObject storyResponseObject = (StoryResponseObject) o;
    return Objects.equals(this.content, storyResponseObject.content) &&
        Objects.equals(this.mediaUrl, storyResponseObject.mediaUrl) &&
        Objects.equals(this.expiresAt, storyResponseObject.expiresAt) &&
        Objects.equals(this.visibility, storyResponseObject.visibility) &&
        Objects.equals(this.id, storyResponseObject.id) &&
        Objects.equals(this.ownerId, storyResponseObject.ownerId) &&
        Objects.equals(this.lock, storyResponseObject.lock) &&
        Objects.equals(this.createdAt, storyResponseObject.createdAt) &&
        Objects.equals(this.viewsCount, storyResponseObject.viewsCount) &&
        Objects.equals(this.permissions, storyResponseObject.permissions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, mediaUrl, expiresAt, visibility, id, ownerId, lock, createdAt, viewsCount, permissions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StoryResponseObject {\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    mediaUrl: ").append(toIndentedString(mediaUrl)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ownerId: ").append(toIndentedString(ownerId)).append("\n");
    sb.append("    lock: ").append(toIndentedString(lock)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    viewsCount: ").append(toIndentedString(viewsCount)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("content");
    openapiFields.add("mediaUrl");
    openapiFields.add("expiresAt");
    openapiFields.add("visibility");
    openapiFields.add("id");
    openapiFields.add("ownerId");
    openapiFields.add("lock");
    openapiFields.add("createdAt");
    openapiFields.add("viewsCount");
    openapiFields.add("permissions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("content");
    openapiRequiredFields.add("expiresAt");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StoryResponseObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StoryResponseObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StoryResponseObject is not found in the empty JSON string", StoryResponseObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StoryResponseObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StoryResponseObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StoryResponseObject.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if ((jsonObj.get("mediaUrl") != null && !jsonObj.get("mediaUrl").isJsonNull()) && !jsonObj.get("mediaUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mediaUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mediaUrl").toString()));
      }
      // validate the optional field `visibility`
      if (jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull()) {
        StoryVisibility.validateJsonElement(jsonObj.get("visibility"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("ownerId") != null && !jsonObj.get("ownerId").isJsonNull()) && !jsonObj.get("ownerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerId").toString()));
      }
      if ((jsonObj.get("lock") != null && !jsonObj.get("lock").isJsonNull()) && !jsonObj.get("lock").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lock` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lock").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull() && !jsonObj.get("permissions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `permissions` to be an array in the JSON string but got `%s`", jsonObj.get("permissions").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StoryResponseObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StoryResponseObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StoryResponseObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StoryResponseObject.class));

       return (TypeAdapter<T>) new TypeAdapter<StoryResponseObject>() {
           @Override
           public void write(JsonWriter out, StoryResponseObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StoryResponseObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StoryResponseObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StoryResponseObject
   * @throws IOException if the JSON string is invalid with respect to StoryResponseObject
   */
  public static StoryResponseObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StoryResponseObject.class);
  }

  /**
   * Convert an instance of StoryResponseObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

