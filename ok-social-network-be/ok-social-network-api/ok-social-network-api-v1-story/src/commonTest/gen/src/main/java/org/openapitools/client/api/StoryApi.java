/*
 * SocialNetwork ${VERSION_APP}
 * It's a place where people communicate with each other
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.StoryCreateRequest;
import org.openapitools.client.model.StoryCreateResponse;
import org.openapitools.client.model.StoryDeleteRequest;
import org.openapitools.client.model.StoryDeleteResponse;
import org.openapitools.client.model.StoryFindRequest;
import org.openapitools.client.model.StoryFindResponse;
import org.openapitools.client.model.StoryReadRequest;
import org.openapitools.client.model.StoryReadResponse;
import org.openapitools.client.model.StoryUpdateRequest;
import org.openapitools.client.model.StoryUpdateResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StoryApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StoryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StoryApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for storyCreate
     * @param storyCreateRequest Request body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storyCreateCall(StoryCreateRequest storyCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = storyCreateRequest;

        // create path and map variables
        String localVarPath = "/story/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storyCreateValidateBeforeCall(StoryCreateRequest storyCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storyCreateRequest' is set
        if (storyCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'storyCreateRequest' when calling storyCreate(Async)");
        }

        return storyCreateCall(storyCreateRequest, _callback);

    }

    /**
     * Create story
     * 
     * @param storyCreateRequest Request body (required)
     * @return StoryCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public StoryCreateResponse storyCreate(StoryCreateRequest storyCreateRequest) throws ApiException {
        ApiResponse<StoryCreateResponse> localVarResp = storyCreateWithHttpInfo(storyCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create story
     * 
     * @param storyCreateRequest Request body (required)
     * @return ApiResponse&lt;StoryCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StoryCreateResponse> storyCreateWithHttpInfo(StoryCreateRequest storyCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = storyCreateValidateBeforeCall(storyCreateRequest, null);
        Type localVarReturnType = new TypeToken<StoryCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create story (asynchronously)
     * 
     * @param storyCreateRequest Request body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storyCreateAsync(StoryCreateRequest storyCreateRequest, final ApiCallback<StoryCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = storyCreateValidateBeforeCall(storyCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<StoryCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storyDelete
     * @param storyDeleteRequest Request body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storyDeleteCall(StoryDeleteRequest storyDeleteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = storyDeleteRequest;

        // create path and map variables
        String localVarPath = "/story/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storyDeleteValidateBeforeCall(StoryDeleteRequest storyDeleteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storyDeleteRequest' is set
        if (storyDeleteRequest == null) {
            throw new ApiException("Missing the required parameter 'storyDeleteRequest' when calling storyDelete(Async)");
        }

        return storyDeleteCall(storyDeleteRequest, _callback);

    }

    /**
     * Delete story
     * 
     * @param storyDeleteRequest Request body (required)
     * @return StoryDeleteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public StoryDeleteResponse storyDelete(StoryDeleteRequest storyDeleteRequest) throws ApiException {
        ApiResponse<StoryDeleteResponse> localVarResp = storyDeleteWithHttpInfo(storyDeleteRequest);
        return localVarResp.getData();
    }

    /**
     * Delete story
     * 
     * @param storyDeleteRequest Request body (required)
     * @return ApiResponse&lt;StoryDeleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StoryDeleteResponse> storyDeleteWithHttpInfo(StoryDeleteRequest storyDeleteRequest) throws ApiException {
        okhttp3.Call localVarCall = storyDeleteValidateBeforeCall(storyDeleteRequest, null);
        Type localVarReturnType = new TypeToken<StoryDeleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete story (asynchronously)
     * 
     * @param storyDeleteRequest Request body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storyDeleteAsync(StoryDeleteRequest storyDeleteRequest, final ApiCallback<StoryDeleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = storyDeleteValidateBeforeCall(storyDeleteRequest, _callback);
        Type localVarReturnType = new TypeToken<StoryDeleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storyFind
     * @param storyFindRequest Request body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storyFindCall(StoryFindRequest storyFindRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = storyFindRequest;

        // create path and map variables
        String localVarPath = "/story/find";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storyFindValidateBeforeCall(StoryFindRequest storyFindRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storyFindRequest' is set
        if (storyFindRequest == null) {
            throw new ApiException("Missing the required parameter 'storyFindRequest' when calling storyFind(Async)");
        }

        return storyFindCall(storyFindRequest, _callback);

    }

    /**
     * Search story
     * 
     * @param storyFindRequest Request body (required)
     * @return StoryFindResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public StoryFindResponse storyFind(StoryFindRequest storyFindRequest) throws ApiException {
        ApiResponse<StoryFindResponse> localVarResp = storyFindWithHttpInfo(storyFindRequest);
        return localVarResp.getData();
    }

    /**
     * Search story
     * 
     * @param storyFindRequest Request body (required)
     * @return ApiResponse&lt;StoryFindResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StoryFindResponse> storyFindWithHttpInfo(StoryFindRequest storyFindRequest) throws ApiException {
        okhttp3.Call localVarCall = storyFindValidateBeforeCall(storyFindRequest, null);
        Type localVarReturnType = new TypeToken<StoryFindResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search story (asynchronously)
     * 
     * @param storyFindRequest Request body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storyFindAsync(StoryFindRequest storyFindRequest, final ApiCallback<StoryFindResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = storyFindValidateBeforeCall(storyFindRequest, _callback);
        Type localVarReturnType = new TypeToken<StoryFindResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storyRead
     * @param storyReadRequest Request body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storyReadCall(StoryReadRequest storyReadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = storyReadRequest;

        // create path and map variables
        String localVarPath = "/story/read";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storyReadValidateBeforeCall(StoryReadRequest storyReadRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storyReadRequest' is set
        if (storyReadRequest == null) {
            throw new ApiException("Missing the required parameter 'storyReadRequest' when calling storyRead(Async)");
        }

        return storyReadCall(storyReadRequest, _callback);

    }

    /**
     * Read story
     * 
     * @param storyReadRequest Request body (required)
     * @return StoryReadResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public StoryReadResponse storyRead(StoryReadRequest storyReadRequest) throws ApiException {
        ApiResponse<StoryReadResponse> localVarResp = storyReadWithHttpInfo(storyReadRequest);
        return localVarResp.getData();
    }

    /**
     * Read story
     * 
     * @param storyReadRequest Request body (required)
     * @return ApiResponse&lt;StoryReadResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StoryReadResponse> storyReadWithHttpInfo(StoryReadRequest storyReadRequest) throws ApiException {
        okhttp3.Call localVarCall = storyReadValidateBeforeCall(storyReadRequest, null);
        Type localVarReturnType = new TypeToken<StoryReadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Read story (asynchronously)
     * 
     * @param storyReadRequest Request body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storyReadAsync(StoryReadRequest storyReadRequest, final ApiCallback<StoryReadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = storyReadValidateBeforeCall(storyReadRequest, _callback);
        Type localVarReturnType = new TypeToken<StoryReadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storyUpdate
     * @param storyUpdateRequest Request body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storyUpdateCall(StoryUpdateRequest storyUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = storyUpdateRequest;

        // create path and map variables
        String localVarPath = "/story/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storyUpdateValidateBeforeCall(StoryUpdateRequest storyUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storyUpdateRequest' is set
        if (storyUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'storyUpdateRequest' when calling storyUpdate(Async)");
        }

        return storyUpdateCall(storyUpdateRequest, _callback);

    }

    /**
     * Update story
     * 
     * @param storyUpdateRequest Request body (required)
     * @return StoryUpdateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public StoryUpdateResponse storyUpdate(StoryUpdateRequest storyUpdateRequest) throws ApiException {
        ApiResponse<StoryUpdateResponse> localVarResp = storyUpdateWithHttpInfo(storyUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Update story
     * 
     * @param storyUpdateRequest Request body (required)
     * @return ApiResponse&lt;StoryUpdateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StoryUpdateResponse> storyUpdateWithHttpInfo(StoryUpdateRequest storyUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = storyUpdateValidateBeforeCall(storyUpdateRequest, null);
        Type localVarReturnType = new TypeToken<StoryUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update story (asynchronously)
     * 
     * @param storyUpdateRequest Request body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storyUpdateAsync(StoryUpdateRequest storyUpdateRequest, final ApiCallback<StoryUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = storyUpdateValidateBeforeCall(storyUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<StoryUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
